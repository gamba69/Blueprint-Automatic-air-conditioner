blueprint:
  name: Automatic air conditioner for summer, monitoring presence, window status, water level, time slot, external temperature sensor, outdoor temperature sensor and controlling climate adjustments.
  description:  "`- Version: 1.95 -`\n\n This blueprint is for using the air conditioner automatically in the summer, based on a start and end temperature. 
          Extra features: External temperature sensor, Window status check, Water level control in the tank, Home presence control, Notifications, Decide on the time slot for operation, Outdoor temperature sensor, Tempering climate adjustments"
  domain: automation
  input:
    climate:
      name: Entity climate
      description: 'Select air conditioning climate entity to be used.'
      selector:
        entity:
          filter:
            domain: climate
          multiple: false
    temperature:
      name: Entity temperature sensor
      description: 'Select external temperature sensor entity to be used.'
      selector:
        entity:
          filter:
            domain: sensor
            device_class: temperature
          multiple: false
    out_temperature:
      name: Entity outdoors temperature sensor
      description: 'Select outdoors temperature sensor entity to be used.'
      selector:
        entity:
          filter:
            domain: sensor
            device_class: temperature
          multiple: false
    set_temperature_climate:
      name: Set temperature climate
      default: 25
      description: 'Select the temperature to be set at climate.'
      selector:
        number:
          min: 20
          max: 30
          unit_of_measurement: °C
          mode: slider
          step: 0.1
    hvac_modes:
      name: Hvac modes
      description: 'Select the mode to be set to the air conditioner.'
      default: cool
      selector:
        select:
          mode: dropdown
          options:
            - cool
            - dry
            - fan_only
    fan_modes:
      name: Fan modes
      description: 'Select the ventilation speed to be set at the air conditioner.'
      default: auto
      selector:
        select:
          mode: dropdown
          options:
            - auto
            - high
            - low
            - mid
    fan_modes_adjust:
      name: Fan modes for climate adjust on low temperature
      description: 'Select the ventilation speed to be set at the air conditioner for adjusting while tempering.'
      default: low
      selector:
        select:
          mode: dropdown
          options:
            - auto
            - high
            - low
            - mid
    moisture:
      name: Water level
      default: binary_sensor.moisture_disabled
      description: 'Select the binary_sensor used to measure the state of the water container. '
      selector:
        entity:
          domain: binary_sensor
          device_class: moisture
    window:
      name: Window
      default: binary_sensor.window_disabled
      description: 'Select the binary_sensor used for the window.'
      selector:
        entity:
          domain: binary_sensor
          device_class: window
    target_temperature_start:
      name: Target temperature start
      default: 24.7
      description: 'Set the startup target temperature.'
      selector:
        number:
          min: 20
          max: 30
          unit_of_measurement: °C
          mode: slider
          step: 0.1
    target_temperature_stop:
      name: Target temperature stop
      default: 23.5
      description: 'Set the target temperature for shutdown.'
      selector:
        number:
          min: 20
          max: 30
          unit_of_measurement: °C
          mode: slider
          step: 0.1
    delay_temperature_stop:
      default: 5
      name: Delay temperature stop
      description: 'Set the climate shutdown delay since the target temperature has been reached.'
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: min
          mode: slider
          step: 1
    target_temperature_adjust_low:
      name: Low Target Temperature for Adjusting Climate
      default: 23.9
      description: 'Set the temperature threshold where the climate will be adjusted, either target temperature will be increased by 1 degree or fan mode will be switched to low, instead of turning off.'
      selector:
        number:
          min: 20
          max: 30
          unit_of_measurement: °C
          mode: slider
          step: 0.1
    target_temperature_adjust_high:
      name: High Target Temperature for Adjusting Climate
      default: 24.4
      description: 'Set the temperature threshold where the climate will be adjusted, either target temperature will be decreased by 1 degree or fan mode will be switched to auto.'
      selector:
        number:
          min: 20
          max: 30
          unit_of_measurement: °C
          mode: slider
          step: 0.1      
    feels_like_threshold:
      name: Feels Like Temperature Threshold
      default: 30
      description: 'Set the outside temperature threshold for not turning off the air conditioner but adjusting the climate temperature by 1 degree.'
      selector:
        number:
          min: 20
          max: 35
          unit_of_measurement: °C
          mode: slider
          step: 0.1
    consider_time:
      name: Consider Start and End Time
      default: true
      description: 'Set to true to consider start and end times, false to ignore them.'
      selector:
        boolean:          
    start_time:
      name: Start time
      default: "00:00:00"
      description: 'Set automatic operation start time.'
      selector:
        time: 
    stop_time:
      name: Stop time
      default: "00:00:00"
      description: 'Set automatic operation end time.'
      selector:
        time: 
    notify_device:
      name: Device to notify push
      default: false
      description: 'Device needs to run the official Home Assistant app to receive notifications.'
      selector:
        device: 
          integration: mobile_app
    presence_home:
      name: Presence Home
      description: 'Select the group consisting of person..'
      default: group.presence_home_disabled
      selector:
        entity:
          domain: group
mode: parallel
variables:
  target_temperature_start: !input target_temperature_start
  climate: !input climate
  temperature: !input temperature
  target_temperature_stop: !input target_temperature_stop
  window: !input window
  presence_home: !input presence_home
  moisture: !input moisture
  out_temperature: !input out_temperature 
  target_temperature_adjust_low: !input target_temperature_adjust_low
  target_temperature_adjust_high: !input target_temperature_adjust_high
  feels_like_threshold: !input feels_like_threshold
trigger:
- platform: state
  entity_id: !input moisture
  from: 'off'
  to: 'on'
  id: moisture_notify
- platform: state
  entity_id: !input moisture
  from: 'off'
  to: 'on'
  for:
    minutes: 5
  id: moisture_climate_off
- platform: state
  entity_id: !input moisture
  from: 'on'
  to: 'off'
  for:
    minutes: 1
  id: moisture_climate_on
- platform: numeric_state
  entity_id: !input temperature
  attribute: temperature
  above: !input target_temperature_start
  id: climate_on
- platform: numeric_state
  entity_id: !input temperature
  attribute: temperature
  below: !input target_temperature_stop
  for: 
    minutes: !input delay_temperature_stop
  id: climate_off
- platform: numeric_state
  entity_id: !input temperature
  attribute: temperature
  below: !input target_temperature_adjust_low
  id: climate_adjust_low
- platform: numeric_state
  entity_id: !input temperature
  attribute: temperature
  above: !input target_temperature_adjust_high
  id: climate_adjust_high
- platform: numeric_state
  entity_id: !input temperature
  attribute: temperature
  above: !input target_temperature_stop
  for: 
    minutes: !input delay_temperature_stop
  id: climate_off
- platform: time
  at: !input stop_time
  id: climate_off
  enabled: "{{ consider_time }}"
- platform: time
  at: !input start_time
  id: climate_on
  enabled: "{{ consider_time }}"
- platform: state
  entity_id: !input window
  for:
    seconds: 20
  id: window
- platform: state
  entity_id: !input presence_home
  from: 
      - not_home
      - home
  to: 
      - not_home
      - home
  id: presence_home
action:
- alias: Full tank warning
  if: 
    - "{{ trigger.id == 'moisture_notify' and not is_state(climate,'off')}}"
  then: 
    - domain: mobile_app
      type: notify
      device_id: !input notify_device
      title: "Klima"
      message: "Klima ma plnu bandasku, automaticky sa vypne za 5 minut."
- alias: Turn air conditioner on
  if:
    - "{{ is_state(climate, 'off') }}"
    - condition: or
      conditions:
        - condition: template
          value_template: "{{ consider_time and (states('sensor.time') >= start_time and states('sensor.time') <= stop_time) }}"
        - condition: template
          value_template: "{{ not consider_time }}"
    - "{{ states(presence_home) == 'home' or presence_home == 'group.presence_home_disabled' }}"
    - "{{ is_state(moisture, 'off') }}"
    - "{{ trigger.id in ['moisture_climate_on', 'climate_on', 'window'] or (trigger.id == 'presence_home' and trigger.to_state.state == 'home') }}"
  then:
      - alias: Window control
        if: 
          - " {{ window == 'binary_sensor.window_disabled' or states(window) == 'off'}}"
        then: 
          - service: climate.set_temperature
            data:
              entity_id: !input climate
              temperature: !input set_temperature_climate
              hvac_mode: !input hvac_modes
          - delay: 
              seconds: 1
          - service: climate.set_fan_mode
            data:
              entity_id: !input climate
              fan_mode: !input fan_modes
        else:
          - domain: mobile_app
            type: notify
            device_id: !input notify_device
            title: "Klima"
            message: "Klima sa nepustila, je otvorene okno."
- alias: Adjust climate on low temp
  if:
    - "{{ not is_state(climate, 'off') }}"
    - or:
        - "{{ trigger.id == 'climate_adjust_low' }}"
        - "{{ trigger.id == 'climate_off' and (states(out_temperature) | float > (feels_like_threshold | float)) }}"
  then:
    - service: climate.set_fan_mode
      data:
        entity_id: !input climate
        fan_mode: !input fan_modes_adjust
- alias: Adjust climate on high temp
  if:
      - "{{not is_state(climate,'off')}}"
      - or:
        - "{{ trigger.id == 'climate_adjust_high' }}"
  then:
  - service: climate.set_fan_mode
    data:
      entity_id: !input climate
      fan_mode: !input fan_modes
- alias: Turn air conditioner off
  if: 
    - "{{not is_state(climate,'off')}}"
    - or: 
      - "{{ trigger.id == 'presence_home' and trigger.to_state.state == 'not_home'}}"
      - "{{ trigger.id == 'climate_off' and (state_attr(temperature,'temperature')|float(1) < target_temperature_stop|float(1)) and (states(out_temperature) | float(1) <= feels_like_threshold | float(1)) }}"
      - "{{ trigger.id == 'climate_off' and trigger.platform == 'time'}}"
      - "{{ trigger.id == 'window' and is_state(window,'on')}}"
      - "{{ trigger.id == 'moisture_climate_off' }}"
  then:
      - service: climate.turn_off
        target:
          entity_id: !input climate
      - domain: mobile_app
        type: notify
        device_id: !input notify_device
        title: "Klima"
        message: "{% if trigger.id == 'window' %}Klima sa vypla, lebo bolo otvorene okno.
                  {% elif trigger.id == 'moisture_climate_off' %}Klima sa vypla, treba vyliat vodu.
                  {% endif %}"